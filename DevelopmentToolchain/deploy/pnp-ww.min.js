"use strict";
var ww = window.ww || function () {
  var n = {
    version: "1.0.1",
    scriptLibraries: [],
    cssFiles: [],
    loadScript: function (t) {
      for (var r, e, i, u = {}, f = 0; f < n.scriptLibraries.length; f++)
        if (n.scriptLibraries[f].scriptSrc === t) {
          u = n.scriptLibraries[f];
          break
        } return u.hasOwnProperty("index") || (r = {
        index: n.scriptLibraries.length,
        scriptSrc: t,
        status: "Loading"
      }, n.scriptLibraries.push(r), u = n.scriptLibraries[n.scriptLibraries.length - 1], e = document.getElementsByTagName("head")[0], i = document.createElement("script"), i.type = "text/javascript", i.readyState && (i.onreadystatechange = function () {
        this.readyState == "complete" && n.scriptLoaded(r.index)
      }), i.onload = function () {
        n.scriptLoaded(r.index)
      }, i.onerror = function () {
        r.status = "Error";
        n.scriptError(r.index)
      }, i.src = t, e.appendChild(i)), u
    },
    loadCss: function (t) {
      for (var f, e, i, r = {}, u = 0; u < n.cssFiles.length; u++)
        if (n.cssFiles[u].cssSrc === t) {
          r = n.cssFiles[u];
          break
        } return r.hasOwnProperty("index") || (f = {
        index: n.cssFiles.length,
        cssSrc: t
      }, n.cssFiles.push(f), r = n.cssFiles[n.cssFiles.length - 1], e = document.getElementsByTagName("head")[0], i = document.createElement("link"), i.type = "text/css", i.rel = "stylesheet", i.href = t, e.appendChild(i)), r
    },
    scriptLoaded: function (t) {
      if (n.scriptLibraries[t].status !== "Error") {
        n.scriptLibraries[t].status = "Complete";
        for (var i = 0; i < n.apps.length; i++) n.apps[i].appStatus === "Waiting" && n.apps[i].appScriptLoaded(t)
      }
    },
    scriptError: function (t) {
      for (var i = 0; i < n.apps.length; i++) n.apps[i].appStatus === "Waiting" && n.apps[i].appScriptError(t)
    },
    apps: [],
    appObj: function () {
      return {
        appId: "",
        appName: "",
        appType: "",
        appBind: null,
        appElement: {},
        appStatus: "Not Started",
        appScripts: [],
        appCss: [],
        appExecPriority: 0,
        appMaxPriority: 0,
        startLoading: function () {
          var r, u, t, i;
          if (this.appCss.length > 0)
            for (r = 0; r < this.appCss.length; r++) u = n.loadCss(this.appCss[r].src), this.appCss[r].index = u.index;
          for (this.appMaxPriority = this.appScripts[this.appScripts.length - 1].priority, t = 0; t < this.appScripts.length; t++) this.appScripts[t].priority === 0 && (this.appStatus = "Waiting", i = n.loadScript(this.appScripts[t].src), this.appScripts[t].status = i.status, this.appScripts[t].index = i.index, i.status === "Complete" ? this.appScriptLoaded(i.index) : i.status === "Error" && this.appScriptError(i.index))
        },
        appScriptLoaded: function (t) {
          for (var i = 0, u = !1, o = !1, e = null, r, s, f, i = 0; i < this.appScripts.length; i++) this.appScripts[i].index === t && (e = this.appScripts[i]);
          if (e !== null && (e.status = "Complete", e.priority === this.appExecPriority)) {
            for (o = !0, i = 0; i < this.appScripts.length; i++) this.appScripts[i].priority === this.appExecPriority && this.appScripts[i].status !== "Complete" && (o = !1);
            if (o)
              for (u = !0; u && this.appExecPriority <= this.appMaxPriority;)
                for (u = !0, this.appExecPriority++, i = 0; i < this.appScripts.length; i++) this.appScripts[i].priority === this.appExecPriority && this.appScripts[i].status !== "Complete" && (r = n.loadScript(this.appScripts[i].src), this.appScripts[i].status = r.status, this.appScripts[i].index = r.index, r.status !== "Complete" && (u = !1), r.status === "Error" && this.appScriptError(r.index));
            if (u)
              if (this.appStatus = "Complete", this.appType.toLowerCase() === "angular") try {
                window.angular.bootstrap(this.appElement, this.appName);
                console.log(this.appName[2] + "(" + this.appId + ") loading complete.")
              } catch (h) {
                console.log("Error bootstrapping application: " + this.appName[2] + "(" + this.appId + ")");
                console.log(h.message)
              } else if (this.appBind != undefined && this.appBind.length > 0) {
                for (s = this.appBind.split("."), f = window, i = 0; i < s.length; i++) f = f[s[i]];
                typeof f == "function" ? (f(this.appElement), console.log(this.appName + "(" + this.appId + ") with function: " + this.appBind + " loading complete.")) : console.log("Error bootstrapping application: " + this.appName + "(" + this.appId + ") with function: " + this.appBind)
              }
          }
        },
        appScriptError: function (n) {
          for (var t = 0; t < this.appScripts.length; t++) this.appScripts[t].index === n && (this.appStatus = "Error", console.log(this.appName + "(" + this.appId + ") failed to load script: " + this.appScripts[t].src))
        }
      }
    },
    appScriptObj: function () {
      return {
        index: -1,
        src: "",
        priority: 0,
        status: "NotLoaded"
      }
    },
    appCssObj: function () {
      return {
        index: -1,
        src: ""
      }
    }
  };
  return n
}();
(function () {
  var elementToBind, scriptPath, appName, appType, appBind, appScripts, appCss, newApp, i, newScript, j, newCss;
  try {
    for (var APP_TYPES = ["angular"], validAppType = !0, element = document.documentElement; element.childNodes.length && element.lastChild.nodeType === 1;) element = element.lastChild;
    elementToBind = element.parentNode;
    scriptPath = element.src;
    scriptPath = scriptPath.substring(0, scriptPath.lastIndexOf("/") + 1);
    appName = element.getAttribute("ww-appName");
    appName = appName.substring(0, 1) === "[" ? eval(appName) : [appName];
    appType = element.getAttribute("ww-appType");
    appType === null && (appType = "");
    appType.length > 0 && (appType = appType.toLowerCase(), validAppType = APP_TYPES.indexOf(appType) > -1);
    appBind = element.getAttribute("ww-appBind");
    appBind === null && (appBind = "");
    appScripts = null;
    try {
      appScripts = JSON.parse(element.getAttribute("ww-appScripts"))
    } catch (e) {
      console.log("Error parsing ww-appScripts tag: " + e)
    }
    appCss = null;
    try {
      appCss = JSON.parse(element.getAttribute("ww-appCss"))
    } catch (e) {
      console.log("Error parsing ww-appCss tag: " + e)
    }
    if (appScripts !== null && appName.length > 0 && (appType.length > 0 || appBind.length > 0) && validAppType) {
      for (newApp = new ww.appObj, newApp.appId = appName[0] + ww.apps.length, newApp.appName = appName, newApp.appType = appType, newApp.appBind = appBind, newApp.appElement = elementToBind, i = 0; i < appScripts.length; i++) newScript = new ww.appScriptObj, appScripts[i].src.substring(0, 2) === "~/" && (appScripts[i].src = appScripts[i].src.replace("~/", scriptPath)), newScript.src = appScripts[i].src, newScript.priority = appScripts[i].priority || 0, newApp.appScripts.push(newScript);
      if (appCss != undefined)
        for (j = 0; j < appCss.length; j++) newCss = new ww.appCssObj, appCss[j].src.substring(0, 2) === "~/" && (appCss[j].src = appCss[j].src.replace("~/", scriptPath)), newCss.src = appCss[j].src, newApp.appCss.push(newCss);
      ww.apps.push(newApp);
      newApp.startLoading()
    } else console.log("Unable to load app: " + appName + ".  Error in script tag.")
  } catch (e) {
    console.log(e)
  }
})();
//# sourceMappingURL=pnp-ww.min.js.map